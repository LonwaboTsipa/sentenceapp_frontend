# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "development" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: cluster-3    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: sentence-app-third-deployment # TODO: update to deployment name
  REPOSITORY: sentenceappartifacts # TODO: update to Artifact Registry docker repository
  IMAGE: sentenceapp

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    # environment: production
    timeout-minutes: 20

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
      #  token_format: 'access_token'
        workload_identity_provider: 'sentenceapp.svc.id.goog'
        service_account: 'lodz-5@sentenceapp.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    # - name: Docker configuration
    #   run: |-
    #     echo ${{ steps.auth.outputs.access_token }} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
     
    - name: Login to GAR
      uses: docker/login-action@v3
      with:
        registry: us-central1-docker.pkg.dev
        username: _json_key
        password: ${{ secrets.GCR_JSON_KEY }}
    
    # Get the GKE credentials so we can deploy to the cluster
    # - name: Set up GKE credentials
    #   uses: google-github-actions/get-gke-credentials@v0
    #   with:
    #     cluster_name: ${{ env.GKE_CLUSTER }}
    #     location: ${{ env.GKE_ZONE }}
    #     project_id: ${{ env.GCP_PROJECT_ID }}
    #     use_internal_ip: true
    #     credentials: ${{ secrets.GCR_JSON_KEY }}
    #     context_name: gke_${{ env.GCP_PROJECT_ID }}_${{ env.GKE_CLUSTER }}_${{ github.run_id }}

    # - name: Set up GKE credentials
    #   uses: google-github-actions/auth@v0
    #   with:
    #     credentials_json: ${{ secrets.GCR_JSON_KEY }}
    #     project_id: ${{ env.GCP_PROJECT_ID }}
    #     export_default_credentials: true

    - name: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCR_JSON_KEY }}'

    - name: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        cluster_name: 'cluster-3'
        location: 'us-central1-c'

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
    #Set up kubectl
    # - name: Configure kubectl
    #   run: |
    #     gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GKE_ZONE }}
    #     kubectl config set-context gke_${{ env.GCP_PROJECT_ID }}_${{ env.GKE_ZONE }}_${{ env.GKE_CLUSTER }}
    #     kubectl config use-context gke_${{ env.GCP_PROJECT_ID }}_${{ env.GKE_ZONE }}_${{ env.GKE_CLUSTER }}
 

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
    # - name: Deploy
    #   run: |-
    
    #     # Replace the image name in the k8s template
    #     ./kustomize edit set image us-central1-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
        
    #     # Build and apply the manifests
    #     ./kustomize build manifests | kubectl apply -f -
        
    #     # Wait for the deployment to complete
    #     kubectl rollout status deployment/$DEPLOYMENT_NAME
        
    #     # Get information about the deployed services
    #     kubectl get services -o wide

    - name: Deploy Step 1
      run: ./kustomize edit set image us-central1-docker.pkg.dev/sentenceapp/sentenceappartifacts/sentenceapp:TAG=us-central1-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA

    - name: Check Kubernetes Context
      run: kubectl config current-context
    
    # - name: Check Kubernetes Cluster Info
    #   run: kubectl cluster-info

    - name: Deploy Step 2
      run: kubectl apply -f manifests/deployment.yaml
      # run: ./kustomize build manifests | kubectl apply -f -

    - name: Wait for Deployment
      run: kubectl get pods 
      run: kubectl rollout status deployment/$DEPLOYMENT_NAME

    - name: Get Service Info
      run: kubectl get services -o wide

